title: MathSolver and XCalc.js
date: 2013-10-06
excerpt: A graphing calculator build on my XCalc.js Javascript library.
header: <div class="browser big"><div class="winbutton"></div><div class="winbutton"></div><div class="winbutton"></div><div class="navbar">http://www.pahgawks.com/math</div><a href="http://www.pahgawks.com/math"><img src="http://www.pahgawks.com/wp-content/uploads/2013/10/mathsolver.png" /></a></div><p><a class="button" href="http://www.pahgawks.com/math">View MathSolver</a> <a class="button" href="https://github.com/pahgawk/XCalc">View Source on GitHub</a></p>
category: app
####

For a little while now, I've thought it would be a fun programming exercise to build a library that reads in a string with a mathematical expression, parse that into some usable data structures, and then process it mathematically. It took me until around a month ago to think of a good way to accomplish that, but once the ball got rolling, everything fit into place nicely, and the whole thing took just a week to make.

<h2>Using XCalc.js</h2>
XCalc.js, the Javascript library I made to parse, evaluate, and graph expressions, is <a href="https://github.com/pahgawk/XCalc">available for download on GitHub.</a> Here's how to use it.

First, include XCalc.js or XCalc.min.js. The minified version is a smaller filesize, but if you want to look at the code and extend it, opt for the full, commented XCalc.js. Both files can be obtained in the <a href="https://github.com/pahgawk/XCalc/releases">releases section of the XCalc GitHub repo.</a>

<code lang="html">
<script src="XCalc.min.js"></script>
</code>
or
<code lang="html">
<script src="XCalc.js"></script>
</code>

<h3>Expressions</h3>
Create an XCalc expression like this:
<code lang="javascript">
var expression = XCalc.createExpression("(10^2/(2*50))-2(30x)");
</code>

To get the result of an expression:
<code lang="javascript">
var x=2;
var result = expression.result(x);
</code>
If an x value is not specified, x defaults to zero.

Expressions can be derived as well:
<code lang="javascript">
var x=2;
var rateOfChange = expression.derive().result(x);
</code>

To get the formula of an expression as a string with HTML that can be formatted nicely (see the example CSS file):
<code lang="javascript">
var formulaDiv = document.createElement("div");
formulaDiv.innerHTML = expression.prettyFormula();
document.getElementById("resultDiv").appendChild(formulaDiv);
</code>

To get the formula of an expression as a plaintext string:
<code lang="javascript">
var formula = document.createElement("p");
formula.innerHTML = expression.formula();
document.getElementById("resultDiv").appendChild(formula);
</code>

To simplify the formula before getting it:
<code lang="javascript">
var formula = document.createElement("p");
formula.innerHTML = expression.simplify().formula();
document.getElementById("resultDiv").appendChild(formula);
</code>

<h3>Graphs</h3>
XCalc graphs are created like this:

<code lang="javascript">
var graph = XCalc.graphExpression("x^2");
</code>

To add the graph canvas to the page:
<code lang="javascript">
document.getElementById("result").appendChild(graph.getCanvas());
</code>

<h4>Graph functions</h4>
<h5>Constructor</h5>
A new graph is created using the following syntax:
<code lang="javascript">
var graph = XCalc.graphExpression(expression, width, height, x1, x2, y1, y2);
</code>

<h5>Range</h5>
Set the range of the graph with:
<code lang="javascript">
graph.setRange(x1, x2, y1, y2);
</code>

You can get the range of the graph with graph.getX1() or graph.getY2(), which allows you to increment the range of the graph by doing something like this:
<code lang="javascript">
graph.setRange(graph.getX1()+5, graph.getX2()-5, graph.getY1()+5, graph.getY2()-5); //zooms in 5px on every side
</code>

<h2>Features</h2>
<h3>Graph Features</h3>
<ul>
	<li>Dynamic scale</li>
	<li>Auto-range (for y axis)</li>
	<li>Displays coordinates on hover</li>
	<li>Click and drag graph to pan</li>
	<li>Scroll on the graph to zoom in and out</li>
</ul>
<h3>Operations Supported</h3>
As of version 1.9.3.8:
<ul>
	<li>Addition (x+y)</li>
	<li>Subtraction (x-y)</li>
	<li>Multiplication (x*y or (x)(y))</li>
	<li>Division (x/y)</li>
	<li>Exponents (x^y or x^(1/y) for roots)</li>
	<li>The following functions:
		<ul>
			<li>sin</li>
			<li>cos</li>
			<li>tan</li>
			<li>asin</li>
			<li>acos</li>
			<li>atan</li>
			<li>abs</li>
			<li>log</li>
			<li>ln</li>
			<li>sqrt</li>
		</ul>
	</li>
    <li>The following constants:
		<ul>
			<li>e</li>
			<li>pi</li>
		</ul>
	</li>
	<li>Single variable evaluation (include "x" in the expression string)</li>
</ul>
<h3>Algebra and Calculus</h3>
<ul>
	<li>Create the derivative of an expression</li>
	<li>Simplify an expression</li>
</ul>

Full documentation is available in the <a href="https://github.com/pahgawk/XCalc">readme on GitHub.</a>