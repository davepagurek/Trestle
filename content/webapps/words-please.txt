title: Words, Please
date: 2014-04-19
excerpt: Find all the words that can be made with a set of letters.
header: <div class="browser big"><div class="winbutton"></div><div class="winbutton"></div><div class="winbutton"></div><div class="navbar">http://www.pahgawks.com/wordsplease</div><a href="http://www.pahgawks.com/wordsplease"><img src="http://www.pahgawks.com/wp-content/uploads/2014/04/wordsplease.png" /></a></div><p><a class="button" href="http://www.pahgawks.com/wordsplease">View Words, Please</a> <a class="button" href="https://github.com/pahgawk/WordsPlease/">View Source on GitHub</a></p>
category: app
####

I've been playing the Android game <a href="https://play.google.com/store/apps/details?id=com.concreterose.wordiest" target="_blank">Wordiest</a> recently, which requires making two words out of a hand of letters given to you. Although it might take the fun out of the game, I made a tool that comes up with the longest words that can be made out of a given set of letters. That's what Words, Please is: a Perl script to find all words in a dictionary containing specified letters. A live demo is available at <a href="http://pahgawks.com/wordsplease">http://pahgawks.com/wordsplease</a>.

<h2>Input</h2>
WordsPlease works with text files with one word per line.

<h2>Usage</h2>
<h3>1. Create an instance of WordsPlease</h3>
Parameters:
<ol>
	<li>Directory: The directory with your dictionary text files</li>
	<li>Word limit (optional): If a limit is specified, WordsPlease stops after finding that amount of words in whatever order they were found in.</li>
	<li>Time limit (optional): If a limit is specified, WordsPlease stops looking after the specified number of seconds.</li>
</ol>
<code lang="perl">
use WordsPlease;
my $wordsPlease = new WordsPlease("dictionaries", 1000, 3);
</code>

Word list text files can be downloaded online from your source of choice. The live demo uses the <a href="http://www-01.sil.org/linguistics/wordlists/english/">SIL International list.</a>

<h3>2. Get an array of matched words</h3>
Parameters:
<ol>
	<li>Letters</li>
	<li>Exclusivity (optional, default is 0): If 1, no letters not listed can be in the word</li>
	<li>Match Quantity (optional, default is 0): If 1, only as many of each letter as appear in the letters string can be in the word</li>
</ol>
<code lang="perl">
my @matchedWords = $wordsPlease->wordsWith("abcde", 1, 1);
</code>